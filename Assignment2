# makeCacheMatrix 
# set the value of the matrix
# get the value of the matrix
# set the value of inverse of the matrix
# get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
    inve <- NULL
    set <- function(y) {
        x <<- y
        inve <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inve <<- inverse
    getinverse <- function() inve
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}


# Returns the inverse of the matrix. 
# Check the computation of the inverse.
# If the copmutation has been completed, get the result.
# If the computation has not been completed, compute and get the result.

cacheSolve <- function(x, ...) {
    inve <- x$getinverse()
    if(!is.null(inve)) {
        message("getting cached data.")
        return(inve)
    }
    data <- x$get()
    inve <- solve(data)
    x$setinverse(inve)
    inve
}
